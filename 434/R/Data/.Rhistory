library(ggplot2)
library(scales)
#get the percentile probability from the standard normal distribution
pnorm(0)
#get the percentile probability from the standard normal distribution
pnorm(-1)
#demo the log and exp form
exp(0.05)
library(ggplot2)
library(scales)
#get the percentile probability from the standard normal distribution
pnorm(-1)
#demo the log and exp form
exp(0.05)
log(1.051271)
BlackScholes <- function(S, K, r, T, sig, type){
if(type=="C"){
d1 <- (log(S/K)+(r + sig^2/2)*T)/(sig*sqrt(T))
d2 <- d1 - sig*sqrt(T)
value <- S * pnorm(d1) - K*exp(-r*T)*pnorm(d2)
return(value)}
if(type=="P"){
d1 <- (log(S/K)+(r + sig^2/2)*T)/(sig*sqrt(T))
d2 <- d1 - sig*sqrt(T)
value <- K*exp(-r*T)*pnorm(-d2) - S*pnorm(-d1)
return(value)}
}
BlackScholes(135,150,.04,1,.2,"C")
BlackScholes(135,150,.04,1,.2,"P")
BlackScholes(135,150,.04,1,.2,"C")
call <- BlackScholes(135,150,.04,1,.2,"C")
put <- BlackScholes(135,150,.04,1,.2,"P")
call <- BlackScholes(96.46,70,0.01,10,.002,"C")
call <- BlackScholes(96.46,70,0.0075,10,.002,"C")
call <- BlackScholes(135,150,.04,1,.2,"C")
put <- BlackScholes(135,150,.04,1,.2,"P")
t <- 100
p <- array(data=NA, dim=t, dimname=NULL)
c <- array(data=NA, dim=t, dimname=NULL)
X <- rnorm(t, mean=100, sd=30)
hist(X)
for (i in 1:t){
c[i] <- BlackScholes(100, x[i], 0.04, 2, .2, "C")
p[i] <- BlackScholes(100, x[i], 0.04, 2, .2, "P")
}
for (i in 1:t){
c[i] <- BlackScholes(100, X[i], 0.04, 2, .2, "C")
p[i] <- BlackScholes(100, X[i], 0.04, 2, .2, "P")
}
df=data.frame(x,c,p)
df=data.frame(X,c,p)
View(df)
library(ggplot2)
library(scales)
#get the percentile probability from the standard normal distribution
pnorm(-1)
#demo the log and exp form
exp(0.05)
log(1.051271)
#Create the BS Function
BlackScholes <- function(S, K, r, T, sig, type){
if(type=="C"){
d1 <- (log(S/K)+(r + sig^2/2)*T)/(sig*sqrt(T))
d2 <- d1 - sig*sqrt(T)
value <- S * pnorm(d1) - K*exp(-r*T)*pnorm(d2)
return(value)}
if(type=="P"){
d1 <- (log(S/K)+(r + sig^2/2)*T)/(sig*sqrt(T))
d2 <- d1 - sig*sqrt(T)
value <- K*exp(-r*T)*pnorm(-d2) - S*pnorm(-d1)
return(value)}
}
call <- BlackScholes(135,150,.04,1,.2,"C")
put <- BlackScholes(135,150,.04,1,.2,"P")
#generate random strike prices, feed into BS model and graph
#blank array creation
t <- 100
p <- array(data=NA, dim=t, dimname=NULL)
c <- array(data=NA, dim=t, dimname=NULL)
#generate random strike prices
x <- rnorm(t, mean=100, sd=30)
hist(x)
#loop through the blank arrays we created and fill in option values
for (i in 1:t){
c[i] <- BlackScholes(100, x[i], 0.04, 2, .2, "C")
p[i] <- BlackScholes(100, x[i], 0.04, 2, .2, "P")
}
df=data.frame(x,c,p)
View(df)
ggplot(df, aes(x=x))+
geom_line(aes(y=c), color="call"), size=1)
ggplot(df, aes(x=x))+
geom_line(aes(y=c, color="call"), size=1)
ggplot(df, aes(x=x))+
geom_line(aes(y=c, color="call"), size=1)+
geom_line(aes(y=p, color="put"), size=1)+
scale_color_manual(values=c('Call' = "blue", "Put" == "red"))+
labs(color="legend")
ggplot(df, aes(x=x))+
geom_line(aes(y=c, color="call"), size=1)+
geom_line(aes(y=p, color="put"), size=1)+
scale_color_manual(values=c('Call' = "blue", "Put" == "red"))+
labs(color="Legend")+
ggtitle(paste("Option Values for various Strike Prices"))
#plot the value of the call and the put at the different strikes
ggplot(df, aes(x=x))+
geom_line(aes(y=c, color="call"), size=1)+
geom_line(aes(y=p, color="put"), size=1)+
scale_color_manual(values=c('Call' == "blue", "Put" == "red"))+
labs(color="Legend")+
ggtitle(paste("Option Values for various Strike Prices"))
ggplot(df, aes(x=x))+
geom_line(aes(y=c, color="call"), size=1)+
geom_line(aes(y=p, color="put"), size=1)+
scale_color_manual(values=c('Call' == "blue", "Put" == "red"))+
labs(color="Legend")+
ggtitle(paste("Option Values for various Strike Prices"))+
labs(x="Strike Price", y="Value of the Option")+
theme(plot.title=element_text(hjust=0.5))
ggplot(df, aes(x=x))+
geom_line(aes(y=c, color="Call"), size=1)+
geom_line(aes(y=p, color="Put"), size=1)+
scale_color_manual(values=c('Call' == "blue", "Put" == "red"))+
labs(color="Legend")+
ggtitle(paste("Option Values for various Strike Prices"))+
labs(x="Strike Price", y="Value of the Option")+
theme(plot.title=element_text(hjust=0.5))
ggplot(df, aes(x=x))+
geom_line(aes(y=c, color="Call"), size=1)+
geom_line(aes(y=p, color="Put"), size=1)+
scale_color_manual(values=c('Call' = "blue", "Put" = "red"))+
labs(color="Legend")+
ggtitle(paste("Option Values for various Strike Prices"))+
labs(x="Strike Price", y="Value of the Option")+
theme(plot.title=element_text(hjust=0.5))
ggplot(df, aes(x=x))+
geom_line(aes(y=c, color="Call"), size=1)+
geom_line(aes(y=p, color="Put"), size=1)+
scale_color_manual(values=c('Call' = "blue", "Put" = "red"))+
labs(color="Legend")+
ggtitle(paste("Option Values for various Strike Prices"))+
labs(x="Strike Price", y="Value of the Option")+
theme(plot.title=element_text(hjust=0.5))+
scale_x_continuous(labels=dollar_format())
ggplot(df, aes(x=x))+
geom_line(aes(y=c, color="Call"), size=1)+
geom_line(aes(y=p, color="Put"), size=1)+
scale_color_manual(values=c('Call' = "blue", "Put" = "red"))+
labs(color="Legend")+
ggtitle(paste("Option Values for various Strike Prices"))+
labs(x="Strike Price", y="Value of the Option")+
theme(plot.title=element_text(hjust=0.5))+
scale_y_continuous(labels=dollar_format())
ggplot(df, aes(x=x))+
geom_line(aes(y=c, color="Call"), size=1)+
geom_line(aes(y=p, color="Put"), size=1)+
scale_color_manual(values=c('Call' = "blue", "Put" = "red"))+
labs(color="Legend")+
ggtitle(paste("Option Values for various Strike Prices"))+
labs(x="Strike Price", y="Value of the Option")+
theme(plot.title=element_text(hjust=0.5))+
scale_y_continuous(labels=dollar_format())+
scale_x_continuous(labels=dollar_format())
ggplot(df, aes(x=x))+
geom_line(aes(y=c, color="Call"), size=1)+
geom_line(aes(y=p, color="Put"), size=1)+
scale_color_manual(values=c('Call' = "blue", "Put" = "red"))+
labs(color="Legend")+
ggtitle(paste("Option Values for Various Strike Prices"))+
labs(x="Strike Price", y="Value of the Option")+
theme(plot.title=element_text(hjust=0.5))+
scale_y_continuous(labels=dollar_format())+
scale_x_continuous(labels=dollar_format())
#calculate the value of a LONG straddle
#Buy a Call and a Put with same strike
prices <- seq(40,160,1)
strike <- 95
library(ggplot2)
library(scales)
#get the percentile probability from the standard normal distribution
pnorm(-1)
#demo the log and exp form
exp(0.05)
log(1.051271)
#Create the BS Function
BlackScholes <- function(S, K, r, T, sig, type){
if(type=="C"){
d1 <- (log(S/K)+(r + sig^2/2)*T)/(sig*sqrt(T))
d2 <- d1 - sig*sqrt(T)
value <- S * pnorm(d1) - K*exp(-r*T)*pnorm(d2)
return(value)}
if(type=="P"){
d1 <- (log(S/K)+(r + sig^2/2)*T)/(sig*sqrt(T))
d2 <- d1 - sig*sqrt(T)
value <- K*exp(-r*T)*pnorm(-d2) - S*pnorm(-d1)
return(value)}
}
call <- BlackScholes(135,150,.04,1,.2,"C")
put <- BlackScholes(135,150,.04,1,.2,"P")
#generate random strike prices, feed into BS model and graph
#blank array creation
t <- 100
p <- array(data=NA, dim=t, dimname=NULL)
c <- array(data=NA, dim=t, dimname=NULL)
#generate random strike prices
x <- rnorm(t, mean=100, sd=30)
hist(x)
#loop through the blank arrays we created and fill in option values
for (i in 1:t){
c[i] <- BlackScholes(100, x[i], 0.04, 2, .2, "C")
p[i] <- BlackScholes(100, x[i], 0.04, 2, .2, "P")
}
df=data.frame(x,c,p)
#plot the value of the call and the put at the different strikes
ggplot(df, aes(x=x))+
geom_line(aes(y=c, color="Call"), size=1)+
geom_line(aes(y=p, color="Put"), size=1)+
scale_color_manual(values=c('Call' = "blue", "Put" = "red"))+
labs(color="Legend")+
ggtitle(paste("Option Values for Various Strike Prices"))+
labs(x="Strike Price", y="Value of the Option")+
theme(plot.title=element_text(hjust=0.5))+
scale_y_continuous(labels=dollar_format())+
scale_x_continuous(labels=dollar_format())
#calculate the value of a LONG straddle
#Buy a Call and a Put with same strike
prices <- seq(40,160,1)
strike <- 95
prem_call <- BlackScholes(100,strike,0.04, 1, .2, "C")
prem_put <- BlackScholes(100,strike,0.04, 1, .2, "P")
#value of the call at exp
int_val_call <- prices - strike - prem_call
payoffLongCall <- pmax(-prem_call, int_val_call)
int_val_put <- strike - prices - prem_put
payoffLongPut <- pmax(-prem_put, int_val_put)
#create an array of payoffs for the entire strategy
payoff <- rowSums(cbind(payoffLongCall, payoffLongPut))
#create a df with all of the Long Straddle info
results <- data.frame(cbind(prices, payoffLongCall, payoffLongPut, payoff))
View(results)
ggplot(results, aes(x=prices))+
geom_line(aes(y=payoffLongCall, color="LongCall"), size=1)+
geom_line(aes(y=payoffLongPut, color="LongPut"), size=1)
ggplot(results, aes(x=prices))+
geom_line(aes(y=payoffLongCall, color="LongCall"), size=1)+
geom_line(aes(y=payoffLongPut, color="LongPut"), size=1)+
geom_line(aes(y=payoff, color="LSPayoff"), size=1)
ggplot(results, aes(x=prices))+
geom_line(aes(y=payoffLongCall, color="LongCall"), size=1)+
geom_line(aes(y=payoffLongPut, color="LongPut"), size=1)+
geom_line(aes(y=payoff, color="LSPayoff"), size=1)+
scale_color_manual(values=c('LongCall' = "blue", "LongPut" = "red", "LSPayoff" = "darkgreen"))
ggplot(results, aes(x=prices))+
geom_line(aes(y=payoffLongCall, color="LongCall"), size=1)+
geom_line(aes(y=payoffLongPut, color="LongPut"), size=1)+
geom_line(aes(y=payoff, color="LSPayoff"), size=1)+
scale_color_manual(values=c('LongCall' = "blue", "LongPut" = "red", "LSPayoff" = "darkgreen"))+
labs(color="Legend")
ggplot(results, aes(x=prices))+
geom_line(aes(y=payoffLongCall, color="LongCall"), size=1)+
geom_line(aes(y=payoffLongPut, color="LongPut"), size=1)+
geom_line(aes(y=payoff, color="LSPayoff"), size=1)+
scale_color_manual(values=c('LongCall' = "blue", "LongPut" = "red", "LSPayoff" = "darkgreen"))+
labs(color="Legend")+
ggtitle(paste("Long Straddle Payoff"))+
labs(x="Strike Price", y="Payoff")+
theme(plot.title=element_text(hjust=0.5))+
scale_y_continuous(labels=dollar_format())+
scale_x_continuous(labels=dollar_format())
#now we plot the strategy
ggplot(results, aes(x=prices))+
geom_line(aes(y=payoffLongCall, color="LongCall"), size=1)+
geom_line(aes(y=payoffLongPut, color="LongPut"), size=1)+
geom_line(aes(y=payoff, color="LSPayoff"), size=1)+
scale_color_manual(values=c('LongCall' = "blue", "LongPut" = "red", "LSPayoff" = "darkgreen"))+
labs(color="Legend")+
ggtitle(paste("Long Straddle Payoff"))+
labs(x="Stock Price", y="Payoff")+
theme(plot.title=element_text(hjust=0.5))+
scale_y_continuous(labels=dollar_format())+
scale_x_continuous(labels=dollar_format())
#now we plot the strategy
ggplot(results, aes(x=prices))+
geom_line(aes(y=payoffLongCall, color="LongCall"), size=1)+
geom_line(aes(y=payoffLongPut, color="LongPut"), size=1)+
geom_line(aes(y=payoff, color="LSPayoff"), size=1)+
scale_color_manual(values=c('LongCall' = "blue", "LongPut" = "red", "LSPayoff" = "darkgreen"))+
labs(color="Legend")+
ggtitle(paste("Long Straddle Payoff"))+
labs(x="Stock Price", y="Payoff")+
theme(plot.title=element_text(hjust=0.5))+
scale_y_continuous(labels=dollar_format(), breaks=seq(-20,60,10))+
scale_x_continuous(labels=dollar_format(), breaks=seq(40,160,10))
library(ggplot2)
library(scales)
#get the percentile probability from the standard normal distribution
pnorm(-1)
#demo the log and exp form
exp(0.05)
log(1.051271)
#Create the BS Function
BlackScholes <- function(S, K, r, T, sig, type){
if(type=="C"){
d1 <- (log(S/K)+(r + sig^2/2)*T)/(sig*sqrt(T))
d2 <- d1 - sig*sqrt(T)
value <- S * pnorm(d1) - K*exp(-r*T)*pnorm(d2)
return(value)}
if(type=="P"){
d1 <- (log(S/K)+(r + sig^2/2)*T)/(sig*sqrt(T))
d2 <- d1 - sig*sqrt(T)
value <- K*exp(-r*T)*pnorm(-d2) - S*pnorm(-d1)
return(value)}
}
put <- BlackScholes(130,125,.03,10,.35,"P")
put <- BlackScholes(130,125,.03,1,.35,"P")
put <- BlackScholes(130,125,.03,0.02739726,.35,"P")
put <- BlackScholes(130,125,.03,0.02739726,.35,"P")
call <- BlackScholes(130,125,.03,0.02739726,.35,"C")
#import libraries
library(tidyquant)
library(ggplot2)
library(gridExtra)
library(quantmod)
#set a working directory
setwd("C:/Users/aless/Documents/434/R/Data")
#Read in the DPZ data from CRSP
dominos <- read.csv("gatti_DPZ.csv")
#Get Yahoo data remotely from QQQ ticker
market_etf <- tq_get("QQQ", from="2017-01-01", to="2023-12-31", get="stock.prices")
#calculate returns for dominos and market ETF using Quantmod
dominos_returns <- Delt(dominos$PRC)
dominos_returns <- dominos_returns[-1,]
market_etf_returns <- Delt(market_etf$close)
market_etf_returns <- market_etf_returns[-1,]
#calculate and report annualized stdevs (sigmas) for company, the index, and ETF
dominos_sigma <- sd(dominos_returns) * sqrt(252)
index_sigma <- sd(dominos$vwretd) * sqrt(252)
market_etf_sigma <- sd(market_etf_returns) * sqrt(252)
print(paste("The sigma for dominos is: ", dominos_sigma))
print(paste("The sigma for the index is: ", index_sigma))
print(paste("The sigma for the market etf is: ", market_etf_sigma))
#calculate and report avg daily volume for dominos and ETF
dominos_avg_daily_vol <- mean(dominos$VOL)
market_etf_avg_daily_vol <- mean(market_etf$volume)
print(paste("The avg daily vol. for dominos is: ", dominos_avg_daily_vol))
print(paste("The avg daily vol. for the market etf is: ", market_etf_avg_daily_vol))
#plot histogram of daily returns for each of three series
df <- cbind(dominos_returns, market_etf_returns)
dominos_ret_hist <- ggplot(df, aes(dominos_returns))+
geom_histogram(color="orange", fill="orange", bins=20)+
labs(y="Number of Obs", x="Ret Bin")+
ggtitle("Histogram of Daily DPZ Rets")+
theme_classic()+
theme(plot.title=element_text (hjust=0.5))
vwretd_hist <- ggplot(dominos, aes(vwretd))+
geom_histogram(color="orange", fill="orange", bins=20)+
labs(y="Number of Obs", x="Ret Bin")+
ggtitle("Histogram of Index VW Daily Rets")+
theme_classic()+
theme(plot.title=element_text (hjust=0.5))
etf_ret_hist <- ggplot(df, aes(market_etf_returns))+
geom_histogram(color="orange", fill="orange", bins=20)+
labs(y="Number of Obs", x="Ret Bin")+
ggtitle("Histogram of Daily QQQ ETF Rets")+
theme_classic()+
theme(plot.title=element_text (hjust=0.5))
#save the plots to a jpeg on computer
#open blank file
jpeg("gatti_Histograms_returns.jpg", width=1000, height=600)
#create the plot
grid.arrange(dominos_ret_hist, vwretd_hist, etf_ret_hist, nrow=1, ncol=3, top="Daily Returns Several Histograms")
#close the file
dev.off()
#merge data and WRDS data and run two regressions and report to user
dominos$returns <- Delt(dominos$PRC)
dominos$etf_returns <- NA
dominos$etf_returns[2:length(dominos$etf_returns)] <- market_etf_returns
model_dpz_index <- lm(vwretd ~ returns, data = dominos)
beta_dpz_index <- coef(model_dpz_index)[2]
print(paste("The beta for dominos returns on index returns is: ", beta_dpz_index))
model_dpzvol_etf <- lm(etf_returns ~ VOL, data = dominos)
beta_dpzvol_etf <- coef(model_dpzvol_etf)[2]
print(paste("The beta for dominos volume on market ETF returns is: ", beta_dpzvol_etf))
